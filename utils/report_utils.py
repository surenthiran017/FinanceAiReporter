import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from io import BytesIO
import base64
import os
from datetime import datetime

def generate_income_statement_pdf(income_data, report_period):
    """
    Generate income statement in PDF format
    
    Args:
        income_data (dict): Income statement data
        report_period (str): Period for the report
        
    Returns:
        BytesIO: PDF content as BytesIO object
    """
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    
    # Create BytesIO buffer to receive PDF data
    buffer = BytesIO()
    
    # Create document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = styles["Heading1"]
    subtitle_style = styles["Heading2"]
    normal_style = styles["Normal"]
    
    # Create content
    content = []
    
    # Title
    content.append(Paragraph("Income Statement", title_style))
    content.append(Paragraph(f"Period: {report_period}", subtitle_style))
    content.append(Spacer(1, 12))
    
    # Create income data
    income_breakdown = income_data.get('income_breakdown', {})
    expense_breakdown = income_data.get('expense_breakdown', {})
    
    # Basic data for all income statements
    data = [
        ["Income Statement", "Amount ($)"],
        ["Total Income", f"${income_data.get('total_income', 0):,.2f}"],
        ["Total Expenses", f"${income_data.get('total_expenses', 0):,.2f}"],
        ["Net Income", f"${income_data.get('net_income', 0):,.2f}"]
    ]
    
    # Add income breakdown if available
    if income_breakdown:
        data.append(["", ""])
        data.append(["Income Breakdown", ""])
        for category, amount in income_breakdown.items():
            data.append([f"  {category}", f"${float(amount):,.2f}"])
    
    # Add expense breakdown if available
    if expense_breakdown:
        data.append(["", ""])
        data.append(["Expense Breakdown", ""])
        for category, amount in expense_breakdown.items():
            data.append([f"  {category}", f"${float(amount):,.2f}"])
    
    # Create table
    table = Table(data, colWidths=[300, 100])
    
    # Style the table
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (1, 0), 12),
        ('BACKGROUND', (0, 1), (1, 3), colors.beige),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 3), (1, 3), 'Helvetica-Bold'),  # Net Income in bold
    ])
    
    # Apply style to table
    table.setStyle(table_style)
    
    # Add table to content
    content.append(table)
    
    # Add notes
    content.append(Spacer(1, 24))
    content.append(Paragraph("Notes:", subtitle_style))
    content.append(Paragraph("1. This statement was automatically generated by FinBot.", normal_style))
    content.append(Paragraph(f"2. Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
    
    # Build document
    doc.build(content)
    
    # Reset buffer position to the beginning
    buffer.seek(0)
    
    return buffer

def generate_balance_sheet_pdf(balance_data, as_of_date):
    """
    Generate balance sheet in PDF format
    
    Args:
        balance_data (dict): Balance sheet data
        as_of_date (str): Date for the balance sheet
        
    Returns:
        BytesIO: PDF content as BytesIO object
    """
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    
    # Create BytesIO buffer to receive PDF data
    buffer = BytesIO()
    
    # Create document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = styles["Heading1"]
    subtitle_style = styles["Heading2"]
    normal_style = styles["Normal"]
    
    # Create content
    content = []
    
    # Title
    content.append(Paragraph("Balance Sheet", title_style))
    content.append(Paragraph(f"As of: {as_of_date}", subtitle_style))
    content.append(Spacer(1, 12))
    
    # Create balance sheet data
    data = [
        ["Balance Sheet", "Amount ($)"],
        ["Total Assets", f"${balance_data.get('total_assets', 0):,.2f}"],
        ["Total Liabilities", f"${balance_data.get('total_liabilities', 0):,.2f}"],
        ["Total Equity", f"${balance_data.get('total_equity', 0):,.2f}"]
    ]
    
    # Create table
    table = Table(data, colWidths=[300, 100])
    
    # Style the table
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (1, 0), 12),
        ('BACKGROUND', (0, 1), (1, 3), colors.beige),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 3), (1, 3), 'Helvetica-Bold'),  # Total Equity in bold
    ])
    
    # Apply style to table
    table.setStyle(table_style)
    
    # Add table to content
    content.append(table)
    
    # Add accounting equation check
    assets = balance_data.get('total_assets', 0)
    liabilities = balance_data.get('total_liabilities', 0)
    equity = balance_data.get('total_equity', 0)
    is_balanced = abs((assets) - (liabilities + equity)) < 0.01  # Allow for small rounding errors
    
    content.append(Spacer(1, 24))
    content.append(Paragraph("Accounting Equation Check:", subtitle_style))
    equation_check = f"Assets (${assets:,.2f}) = Liabilities (${liabilities:,.2f}) + Equity (${equity:,.2f})"
    content.append(Paragraph(equation_check, normal_style))
    content.append(Paragraph(f"Balanced: {'Yes' if is_balanced else 'No'}", normal_style))
    
    # Add notes
    content.append(Spacer(1, 24))
    content.append(Paragraph("Notes:", subtitle_style))
    content.append(Paragraph("1. This statement was automatically generated by FinBot.", normal_style))
    content.append(Paragraph(f"2. Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
    
    # Build document
    doc.build(content)
    
    # Reset buffer position to the beginning
    buffer.seek(0)
    
    return buffer

def generate_cash_flow_pdf(cash_flow_data, report_period):
    """
    Generate cash flow statement in PDF format
    
    Args:
        cash_flow_data (dict): Cash flow statement data
        report_period (str): Period for the report
        
    Returns:
        BytesIO: PDF content as BytesIO object
    """
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    
    # Create BytesIO buffer to receive PDF data
    buffer = BytesIO()
    
    # Create document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = styles["Heading1"]
    subtitle_style = styles["Heading2"]
    normal_style = styles["Normal"]
    
    # Create content
    content = []
    
    # Title
    content.append(Paragraph("Cash Flow Statement", title_style))
    content.append(Paragraph(f"Period: {report_period}", subtitle_style))
    content.append(Spacer(1, 12))
    
    # Create cash flow data
    data = [
        ["Cash Flow Statement", "Amount ($)"],
        ["Operating Cash Flow", f"${cash_flow_data.get('operating_cash_flow', 0):,.2f}"],
        ["Investing Cash Flow", f"${cash_flow_data.get('investing_cash_flow', 0):,.2f}"],
        ["Financing Cash Flow", f"${cash_flow_data.get('financing_cash_flow', 0):,.2f}"],
        ["Net Cash Flow", f"${cash_flow_data.get('net_cash_flow', 0):,.2f}"]
    ]
    
    # Create table
    table = Table(data, colWidths=[300, 100])
    
    # Style the table
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (1, 0), 12),
        ('BACKGROUND', (0, 1), (1, 4), colors.beige),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 4), (1, 4), 'Helvetica-Bold'),  # Net Cash Flow in bold
    ])
    
    # Apply style to table
    table.setStyle(table_style)
    
    # Add table to content
    content.append(table)
    
    # Add notes
    content.append(Spacer(1, 24))
    content.append(Paragraph("Notes:", subtitle_style))
    content.append(Paragraph("1. This statement was automatically generated by FinBot.", normal_style))
    content.append(Paragraph(f"2. Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
    
    # Build document
    doc.build(content)
    
    # Reset buffer position to the beginning
    buffer.seek(0)
    
    return buffer

def generate_financial_summary_pdf(data_summary, report_period):
    """
    Generate comprehensive financial summary in PDF format
    
    Args:
        data_summary (dict): Financial data summary
        report_period (str): Period for the report
        
    Returns:
        BytesIO: PDF content as BytesIO object
    """
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    
    # Create BytesIO buffer to receive PDF data
    buffer = BytesIO()
    
    # Create document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = styles["Heading1"]
    subtitle_style = styles["Heading2"]
    section_style = styles["Heading3"]
    normal_style = styles["Normal"]
    
    # Create content
    content = []
    
    # Title
    content.append(Paragraph("Financial Summary Report", title_style))
    content.append(Paragraph(f"Period: {report_period}", subtitle_style))
    content.append(Spacer(1, 12))
    
    # Extract data
    income_statement = data_summary.get('income_statement', {})
    balance_sheet = data_summary.get('balance_sheet', {})
    cash_flow = data_summary.get('cash_flow', {})
    ratios = data_summary.get('financial_ratios', {})
    
    # Income Statement Section
    content.append(Paragraph("Income Statement Summary", section_style))
    income_data = [
        ["Item", "Amount ($)"],
        ["Total Income", f"${income_statement.get('total_income', 0):,.2f}"],
        ["Total Expenses", f"${income_statement.get('total_expenses', 0):,.2f}"],
        ["Net Income", f"${income_statement.get('net_income', 0):,.2f}"]
    ]
    
    income_table = Table(income_data, colWidths=[300, 100])
    income_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
    ]))
    content.append(income_table)
    content.append(Spacer(1, 12))
    
    # Balance Sheet Section
    content.append(Paragraph("Balance Sheet Summary", section_style))
    balance_data = [
        ["Item", "Amount ($)"],
        ["Total Assets", f"${balance_sheet.get('total_assets', 0):,.2f}"],
        ["Total Liabilities", f"${balance_sheet.get('total_liabilities', 0):,.2f}"],
        ["Total Equity", f"${balance_sheet.get('total_equity', 0):,.2f}"]
    ]
    
    balance_table = Table(balance_data, colWidths=[300, 100])
    balance_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
    ]))
    content.append(balance_table)
    content.append(Spacer(1, 12))
    
    # Cash Flow Section
    content.append(Paragraph("Cash Flow Summary", section_style))
    cash_flow_data = [
        ["Item", "Amount ($)"],
        ["Operating Cash Flow", f"${cash_flow.get('operating_cash_flow', 0):,.2f}"],
        ["Investing Cash Flow", f"${cash_flow.get('investing_cash_flow', 0):,.2f}"],
        ["Financing Cash Flow", f"${cash_flow.get('financing_cash_flow', 0):,.2f}"],
        ["Net Cash Flow", f"${cash_flow.get('net_cash_flow', 0):,.2f}"]
    ]
    
    cash_flow_table = Table(cash_flow_data, colWidths=[300, 100])
    cash_flow_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
    ]))
    content.append(cash_flow_table)
    content.append(Spacer(1, 12))
    
    # Financial Ratios Section
    content.append(Paragraph("Key Financial Ratios", section_style))
    ratio_data = [
        ["Ratio", "Value"],
        ["Profit Margin", f"{ratios.get('profit_margin', 0):.2%}"],
        ["Return on Assets", f"{ratios.get('return_on_assets', 0):.2%}"],
        ["Return on Equity", f"{ratios.get('return_on_equity', 0):.2%}"],
        ["Debt to Equity", f"{ratios.get('debt_to_equity', 0):.2f}"],
        ["Asset to Liability", f"{ratios.get('asset_to_liability', 0):.2f}"]
    ]
    
    ratio_table = Table(ratio_data, colWidths=[300, 100])
    ratio_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (1, -1), 1, colors.black),
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
    ]))
    content.append(ratio_table)
    
    # Add notes
    content.append(Spacer(1, 24))
    content.append(Paragraph("Notes:", subtitle_style))
    content.append(Paragraph("1. This report was automatically generated by FinBot.", normal_style))
    content.append(Paragraph(f"2. Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
    content.append(Paragraph("3. This report provides a summary of financial performance and position.", normal_style))
    
    # Build document
    doc.build(content)
    
    # Reset buffer position to the beginning
    buffer.seek(0)
    
    return buffer

def get_download_link(file_buffer, filename, mime_type):
    """
    Generate a download link for a file
    
    Args:
        file_buffer (BytesIO): File content as BytesIO
        filename (str): Name of the file to download
        mime_type (str): MIME type of the file
        
    Returns:
        str: HTML string with download link
    """
    b64 = base64.b64encode(file_buffer.getvalue()).decode()
    href = f'<a href="data:{mime_type};base64,{b64}" download="{filename}">Download {filename}</a>'
    return href

def generate_report_visualizations(data_summary):
    """
    Generate visualization figures for financial reports
    
    Args:
        data_summary (dict): Financial data summary
        
    Returns:
        dict: Dictionary of plotly figures
    """
    figures = {}
    
    # Extract data
    income_statement = data_summary.get('income_statement', {})
    balance_sheet = data_summary.get('balance_sheet', {})
    cash_flow = data_summary.get('cash_flow', {})
    
    # Income Statement Visualization
    income_labels = ['Total Income', 'Total Expenses', 'Net Income']
    income_values = [
        income_statement.get('total_income', 0),
        income_statement.get('total_expenses', 0),
        income_statement.get('net_income', 0)
    ]
    
    figures['income_summary'] = go.Figure(data=[
        go.Bar(x=income_labels, y=income_values, 
               marker_color=['#4CAF50', '#F44336', '#2196F3'])
    ])
    figures['income_summary'].update_layout(
        title='Income Statement Summary',
        xaxis_title='Category',
        yaxis_title='Amount ($)',
        template='plotly_white'
    )
    
    # Balance Sheet Visualization
    balance_labels = ['Total Assets', 'Total Liabilities', 'Total Equity']
    balance_values = [
        balance_sheet.get('total_assets', 0),
        balance_sheet.get('total_liabilities', 0),
        balance_sheet.get('total_equity', 0)
    ]
    
    figures['balance_summary'] = go.Figure(data=[
        go.Pie(labels=balance_labels, values=balance_values, 
               marker=dict(colors=['#4CAF50', '#F44336', '#2196F3']))
    ])
    figures['balance_summary'].update_layout(
        title='Balance Sheet Composition'
    )
    
    # Cash Flow Visualization
    cash_flow_labels = ['Operating', 'Investing', 'Financing', 'Net Cash Flow']
    cash_flow_values = [
        cash_flow.get('operating_cash_flow', 0),
        cash_flow.get('investing_cash_flow', 0),
        cash_flow.get('financing_cash_flow', 0),
        cash_flow.get('net_cash_flow', 0)
    ]
    
    figures['cash_flow_summary'] = go.Figure(data=[
        go.Bar(x=cash_flow_labels, y=cash_flow_values,
               marker_color=['#4CAF50', '#FF9800', '#2196F3', '#9C27B0'])
    ])
    figures['cash_flow_summary'].update_layout(
        title='Cash Flow Summary',
        xaxis_title='Category',
        yaxis_title='Amount ($)',
        template='plotly_white'
    )
    
    # Income Breakdown Visualization
    income_breakdown = income_statement.get('income_breakdown', {})
    if income_breakdown:
        income_categories = list(income_breakdown.keys())
        income_amounts = list(income_breakdown.values())
        
        figures['income_breakdown'] = go.Figure(data=[
            go.Pie(labels=income_categories, values=income_amounts)
        ])
        figures['income_breakdown'].update_layout(
            title='Income Breakdown'
        )
    
    # Expense Breakdown Visualization
    expense_breakdown = income_statement.get('expense_breakdown', {})
    if expense_breakdown:
        expense_categories = list(expense_breakdown.keys())
        expense_amounts = list(expense_breakdown.values())
        
        figures['expense_breakdown'] = go.Figure(data=[
            go.Pie(labels=expense_categories, values=expense_amounts)
        ])
        figures['expense_breakdown'].update_layout(
            title='Expense Breakdown'
        )
    
    return figures
